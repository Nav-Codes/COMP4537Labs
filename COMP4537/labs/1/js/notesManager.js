//class idea generated by chatGPT 
class NotesManager {
    static #localStorageMngr = new LocalStorageManager()

    /** stores Note objects as defined in note.js */
    static #notesArray = []

    initialize() {
        this.loadNotes()
        try {
            document.getElementById("add").addEventListener("click", () => {
                this.createNote()
            })
        } catch (error) {}
        this.updateReader()
    }

    loadNotes() {
        let notes = NotesManager.#localStorageMngr.getFromLocalStorage()
        //notes is now an array of objects
        for (let i = 0; i < notes.length; i++) {
            let tempNote = new Note()
            tempNote.getNoteDiv().querySelector(".noteBox").value = notes[i].note
            NotesManager.#notesArray.push(tempNote)
            this.addListenersToNote(tempNote)
            document.getElementById("notes").insertAdjacentElement("beforeend", tempNote.getNoteDiv())
        }
    }

    createNote() {
        NotesManager.#notesArray.push(new Note())

        //gets Note object that just got created
        let index = NotesManager.#notesArray.length - 1
        let tempNote = NotesManager.#notesArray.at(index)

        this.addListenersToNote(tempNote)

        NotesManager.#localStorageMngr.addNote({ note: "" })

        document.getElementById("notes").insertAdjacentElement("beforeend", tempNote.getNoteDiv())
        this.updateReader()
    }

    addListenersToNote(noteObj) {
        noteObj.getNoteDiv().querySelector(".removeBtn").addEventListener("click", () => {
            this.deleteNote(noteObj)
        })
        noteObj.getNoteDiv().querySelector(".noteBox").addEventListener("keyup", () => {
            this.updateNotes(noteObj)
        })
    }

    updateNotes(noteObj) {

        //generated by chatGPT and modified 
        let index = -1
        let notes = document.getElementById("notes")
        for (let i = 0; i < notes.children.length; i++) {
            if (notes.children[i] === noteObj.getNoteDiv()) {
                index = i
                break
            }
        }

        let noteText = noteObj.getNoteDiv().querySelector(".noteBox").value
        let noteDataObj = { note: noteText }
        NotesManager.#localStorageMngr.updateNote(noteDataObj, index)
        this.updateReader()
    }

    deleteNote(noteObj) {
        noteObj.removeNoteDiv()

        let index = NotesManager.#notesArray.indexOf(noteObj)

        NotesManager.#notesArray.splice(index, 1)

        NotesManager.#localStorageMngr.deleteNote(index)

        this.updateReader()
    }

    updateReader() {
        if (document.getElementById("readerDiv") !== null) {
            try {
                // document.getElementById("readerDiv")
                document.getElementById("notes").innerHTML = ""
                this.loadNotes()
                document.querySelectorAll(".noteDiv").forEach((currentElement, currentIndex, listObj) => {
                    currentElement.querySelector(".removeBtn").remove()
                    currentElement.querySelector(".noteBox").disabled = true
                })
                NotesManager.#localStorageMngr.updateTime()
            } catch (error) { }
        }
    }
}